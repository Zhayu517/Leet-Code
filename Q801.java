/*
801. 使序列递增的最小交换次数
我们有两个长度相等且不为空的整型数组 nums1 和 nums2 。在一次操作中，我们可以交换 nums1[i] 和 nums2[i]的元素。

例如，如果 nums1 = [1,2,3,8] ， nums2 =[5,6,7,4] ，你可以交换 i = 3 处的元素，得到 nums1 =[1,2,3,4] 和 nums2 =[5,6,7,8] 。
返回 使 nums1 和 nums2 严格递增 所需操作的最小次数 。

数组 arr 严格递增 且  arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1] 。

注意：
用例保证可以实现操作。


示例 1:
输入: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
输出: 1
解释:
交换 A[3] 和 B[3] 后，两个数组如下:
A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]
两个数组均为严格递增的。

示例 2:
输入: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
输出: 1
 */
public class Q801 {
    /*
    利用动态规划做。
    由于严格递增的性质，从数组开始遍历的时候，出现一个不递增的数字时，当前数字之前的数字都是严格递增的。
    那么，用一个dp来储存当前的状态：f[i][j] (i为字符串前i个字符，j为0,1表示第i位是否交换)
    状态转移即为：
    初始条件
    f[0][0] = 0;
    f[0][1] = 1;

    转移方程：
    f[i][0] = min(f[i - 1][0], f[i - 1][1]);
    f[i][1] = min(f[i - 1][0] + 1, f[i - 1][1] + 1);

    结果为
    min(f[n - 1][0], f[n - 1][1]);
     */
    public int minSwap(int[] nums1, int[] nums2) {
        int length = nums1.length;
        int a = 0, b = 1; // 由于动态规划只与前一个数的状态有关系，可以用两个数字来节省空间（滚动数组）
        for (int i = 1; i < length; i++)
        {
            int at = a, bt = b; // 把动态规划的数组换成两个数
            a = b = length; // 每次把a和b初始化最大，这样取min的时候总会更新
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i-1]) // 不需要交换的情况
            {
                a = at; // 由于严格递增的缘故,以及a每次被初始化为最大，at总会小于a，这样节省了Math.min（）的使用
                b = bt + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i-1]) // 需要交换的情况
            {
                a = Math.min(a, bt);
                b = Math.min(b, at + 1);
            }
        }
        return Math.min(a, b);
    }
}
