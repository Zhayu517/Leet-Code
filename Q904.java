/*
904. 水果成篮
你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。

你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：

你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。



示例 1：
输入：fruits = [1,2,1]
输出：3
解释：可以采摘全部 3 棵树。

示例 2：
输入：fruits = [0,1,2,2]
输出：3
解释：可以采摘 [1,2,2] 这三棵树。
如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。

示例 3：
输入：fruits = [1,2,3,2,2]
输出：4
解释：可以采摘 [2,3,2,2] 这四棵树。
如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。

示例 4：
输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]
输出：5
解释：可以采摘 [1,2,1,1,2] 这五棵树。
 */
public class Q904 {
    /*
    双指针
     */
    public int totalFruit(int[] fruits) {
        int n = fruits.length;
        if (n <= 2) {
            return n;
        }
        int ans = 0; // 当前找到的最长的
        int cur = 0; // 两种同类型果树的长度
        int right = 0; // 右指针，每次会向右移
        int left; // 左指针，记录上一个类型的果树的开始位置
        int a = fruits[0]; // 果数类型1
        int b; // 果树类型2
        while (fruits[right] == a) { // 一直遍历到第一个第二类型的果树
            right++;
            cur++;
            if (right == n) return n; // 如果只有两种树，返回树的个数即可
        }
        b = fruits[right]; // 建立第二种果树类型
        left = right; // 更新left
        while (right < n) {
            /*
            如果遇到了新的类型（a，b之外的类型），
            更新最长长度
            a变成上一类型的果树
            b变成目前类型果树
            cur变成上一类型果树的个数（当前位置减去上一个类型的果树的开始位置）
            更新left
             */
            if (fruits[right] != a && fruits[right] != b) {
                ans = Math.max(cur, ans);
                a = fruits[left];
                b = fruits[right];
                cur = right - left;
                left = right;
            } else {
                /*
                如果类型发生变化， 更新left （不管是第二类型还是新类型，left都需要更新）
                例子： 001110011122
                当遍历到第三个0时，此时并没有新类型（a，b之外的类型），但是a，b类型出现并不连续，
                所以left应等于当前果树的位置
                 */
                if (fruits[right] != fruits[left]) {
                    left = right;
                }
                cur++;
                right++;
            }
        }
        return Math.max(cur, ans);
    }
}
